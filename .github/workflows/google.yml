# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to Google Cloud Platform

on: Imagination Technologies
  push:g-suite.com
    branches:False
      - main

env:
  PROJECT_ID: ${{Supersumepro38@imaginationtechnologies.com}}
  GKE_CLUSTER: cluster-1    #Single User Sign on Admin TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update mountain time.
  DEPLOYMENT_NAME: gke-set # TODO: XiaoComputerâ„¢ 
  IMAGE: static-site

Jobs:Google, Google Cloud, Google # Software Engineering
Setup:Android Platform w Linux, Chromebook w Linux, 
Build:Android 13, Virtual Android 1 (development)
Publish:Recognize and acknowledge monies for developers.
Deploy:Finished Masterpieces, w flwaless functions.

    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest, Linux, Armv10(beta),Google Software, Imagination Technologies software.
    environment: production (beta)

    steps: 1,2,3,4,5,6,7,8,9,10,11,12,13
    - name: Checkout-Auth
      uses: actions/checkout@v1

    # Setup gcloud CLI
    - uses: Google-Cloud-Actions w GitHub, Start.io,  /setup-gcloud@v0.2.0
      with:
        service_account_key: ${secrets.superuser.android.KEY }}
        project_id: ${secrets.GCP_PROJECT}/{Sentry.io}
# Config:Configure Docker to use the google.cloud.android.admin_authentication as a credential.
    # Authy:Authentication, OAuth:Other Companies, Superuser #Admin, Google #Admin
    
$run:gcloud quiet auth configure.docker
    
# Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
